// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distance_output.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "distance_output.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace distance_output {

namespace {

const ::google::protobuf::Descriptor* video_sequence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  video_sequence_reflection_ = NULL;
const ::google::protobuf::Descriptor* frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  frame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_distance_5foutput_2eproto() {
  protobuf_AddDesc_distance_5foutput_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "distance_output.proto");
  GOOGLE_CHECK(file != NULL);
  video_sequence_descriptor_ = file->message_type(0);
  static const int video_sequence_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(video_sequence, per_frame_),
  };
  video_sequence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      video_sequence_descriptor_,
      video_sequence::default_instance_,
      video_sequence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(video_sequence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(video_sequence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(video_sequence));
  frame_descriptor_ = file->message_type(1);
  static const int frame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, frame_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, value_),
  };
  frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      frame_descriptor_,
      frame::default_instance_,
      frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(frame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_distance_5foutput_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    video_sequence_descriptor_, &video_sequence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    frame_descriptor_, &frame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_distance_5foutput_2eproto() {
  delete video_sequence::default_instance_;
  delete video_sequence_reflection_;
  delete frame::default_instance_;
  delete frame_reflection_;
}

void protobuf_AddDesc_distance_5foutput_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025distance_output.proto\022\017distance_output"
    "\";\n\016video_sequence\022)\n\tper_frame\030\001 \003(\0132\026."
    "distance_output.frame\"(\n\005frame\022\020\n\010frame_"
    "no\030\001 \002(\005\022\r\n\005value\030\002 \002(\002", 143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "distance_output.proto", &protobuf_RegisterTypes);
  video_sequence::default_instance_ = new video_sequence();
  frame::default_instance_ = new frame();
  video_sequence::default_instance_->InitAsDefaultInstance();
  frame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_distance_5foutput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_distance_5foutput_2eproto {
  StaticDescriptorInitializer_distance_5foutput_2eproto() {
    protobuf_AddDesc_distance_5foutput_2eproto();
  }
} static_descriptor_initializer_distance_5foutput_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int video_sequence::kPerFrameFieldNumber;
#endif  // !_MSC_VER

video_sequence::video_sequence()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:distance_output.video_sequence)
}

void video_sequence::InitAsDefaultInstance() {
}

video_sequence::video_sequence(const video_sequence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:distance_output.video_sequence)
}

void video_sequence::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

video_sequence::~video_sequence() {
  // @@protoc_insertion_point(destructor:distance_output.video_sequence)
  SharedDtor();
}

void video_sequence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void video_sequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* video_sequence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return video_sequence_descriptor_;
}

const video_sequence& video_sequence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distance_5foutput_2eproto();
  return *default_instance_;
}

video_sequence* video_sequence::default_instance_ = NULL;

video_sequence* video_sequence::New() const {
  return new video_sequence;
}

void video_sequence::Clear() {
  per_frame_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool video_sequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:distance_output.video_sequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .distance_output.frame per_frame = 1;
      case 1: {
        if (tag == 10) {
         parse_per_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_per_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_per_frame;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:distance_output.video_sequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:distance_output.video_sequence)
  return false;
#undef DO_
}

void video_sequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:distance_output.video_sequence)
  // repeated .distance_output.frame per_frame = 1;
  for (int i = 0; i < this->per_frame_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->per_frame(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:distance_output.video_sequence)
}

::google::protobuf::uint8* video_sequence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:distance_output.video_sequence)
  // repeated .distance_output.frame per_frame = 1;
  for (int i = 0; i < this->per_frame_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->per_frame(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distance_output.video_sequence)
  return target;
}

int video_sequence::ByteSize() const {
  int total_size = 0;

  // repeated .distance_output.frame per_frame = 1;
  total_size += 1 * this->per_frame_size();
  for (int i = 0; i < this->per_frame_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->per_frame(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void video_sequence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const video_sequence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const video_sequence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void video_sequence::MergeFrom(const video_sequence& from) {
  GOOGLE_CHECK_NE(&from, this);
  per_frame_.MergeFrom(from.per_frame_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void video_sequence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void video_sequence::CopyFrom(const video_sequence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool video_sequence::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->per_frame())) return false;
  return true;
}

void video_sequence::Swap(video_sequence* other) {
  if (other != this) {
    per_frame_.Swap(&other->per_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata video_sequence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = video_sequence_descriptor_;
  metadata.reflection = video_sequence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int frame::kFrameNoFieldNumber;
const int frame::kValueFieldNumber;
#endif  // !_MSC_VER

frame::frame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:distance_output.frame)
}

void frame::InitAsDefaultInstance() {
}

frame::frame(const frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:distance_output.frame)
}

void frame::SharedCtor() {
  _cached_size_ = 0;
  frame_no_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

frame::~frame() {
  // @@protoc_insertion_point(destructor:distance_output.frame)
  SharedDtor();
}

void frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return frame_descriptor_;
}

const frame& frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distance_5foutput_2eproto();
  return *default_instance_;
}

frame* frame::default_instance_ = NULL;

frame* frame::New() const {
  return new frame;
}

void frame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<frame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(frame_no_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:distance_output.frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 frame_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_no_)));
          set_has_frame_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // required float value = 2;
      case 2: {
        if (tag == 21) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:distance_output.frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:distance_output.frame)
  return false;
#undef DO_
}

void frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:distance_output.frame)
  // required int32 frame_no = 1;
  if (has_frame_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_no(), output);
  }

  // required float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:distance_output.frame)
}

::google::protobuf::uint8* frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:distance_output.frame)
  // required int32 frame_no = 1;
  if (has_frame_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_no(), target);
  }

  // required float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distance_output.frame)
  return target;
}

int frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 frame_no = 1;
    if (has_frame_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_no());
    }

    // required float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void frame::MergeFrom(const frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_no()) {
      set_frame_no(from.frame_no());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void frame::CopyFrom(const frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void frame::Swap(frame* other) {
  if (other != this) {
    std::swap(frame_no_, other->frame_no_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = frame_descriptor_;
  metadata.reflection = frame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace distance_output

// @@protoc_insertion_point(global_scope)
